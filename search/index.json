[{"content":"基于Linux操作系统下的相关学习 (本次学习开发环境都是在虚拟机ubantu24.04.2系统版本以及ROS2的jazzy版本下的记录)本来是想分开来分别记录树莓派跟ROS2的相关学习的，但是想来现在的学习深度和笔记都较为浅，我就暂为放到一起算作总的Linux学习好了🤌🤌\n1. Linux基础终端 ls -a【列出当前文件夹内所有文件，包括隐藏文件】 source +文件名称【运行某个文本文件】 ~/.bashrc【文件是终端运行时会自动提前运行的脚本】 nano 文件名【文件编辑器编辑/创建文件】 gedit 文件名【文件编辑器编辑/创建文件】 whereis 软件名称【查询安装路径】 code ./ 【使用vscode打开当前文件路径文件夹】 mv 原文件名 重命名文件名 【重命名文件名】 查看当前系统版本：lsb_release -a 2. 树莓派学习笔记 其实树莓派就是一个集成的小的硬件\u0026quot;小电脑\u0026quot;，安装好对应的树莓派或者其他操作系统就可以正常开发使用了，对应的个人认为较好的教程可以看b站UP树小溪，整体的环境配置和流程我就不赘述了，详细直接看这个他的视频即可。此处只做个人的学习笔记，仅供参考！补充：本笔记的系统环境是树莓派的官方环境Raspberry Pi OS。\n2.1 初步账号设置 主机：miaochuangbalou 密码：111111 地址：192.168.137.92 【此处是我给树莓派配置的固定ip，详细看教程】 2.2 常用终端指令 终端开启树莓派配置选项：sudo raspi-config 查看当前电脑IP:hostname -I 删除非空目录文件夹：rm -r 文件名 清屏操作：clear 2.3 配置示例代码 代码1：配置树莓派自动开启vnc 例程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/bin/sh export USER=\u0026#39;master\u0026#39; eval cd~$USER case \u0026#34;$1\u0026#34; in start) #启动命令行。此处自定义分辨率、控制台号码或其它参数。 su $USER -c \u0026#39;/usr/bin/vncserver -depth 24 -geometry 1920x1080:1\u0026#39; echo \u0026#34;Starting VNCServer for $USER\u0026#34; ;; stop) su $USER -c \u0026#39;/usr/bin/vncserver -kill:1\u0026#39; echo \u0026#34;VNCServer stopped\u0026#34; ;; *) echo \u0026#34;Usage: /etc/init.d/vncserver {start/stop}\u0026#34; exit 1 ;; esac exit 0 代码2：自动连接热点 例程 1 2 3 4 5 6 7 8 9 10 11 #（wpa_supplicant.conf（文件名）） country=CN ctrl_interface=DIR=/var/run/wpa_supplicant，GROUP=netdev update_config=1 network={ ssid=\u0026#34;WiFi名称\u0026#34; psk=\u0026#34;WiFi密码\u0026#34; key_mgmt=WPA-PSK priority=1 } 2.4 python开发环境配置(venv虚拟环境) 查看当前python版本：python \u0026ndash;version 创建虚拟环境： (1). sudo apt-get update （更新apt工具） (2). sudo apt-get install python3-venv（下载虚拟环境） (3). python3 -m venv venv （先进入想要创建的虚拟环境的文件路径创建虚拟环境，最后为环境名称） (4). source venv/bin/activate （激活虚拟环境） (5). pip list（查看当前环境的python包） (6). deactivate（退出当前的虚拟环境） 创建虚拟环境venv时继承系统的包 方法 1：创建虚拟环境时继承系统包 python3 -m venv \u0026ndash;system-site-packages myenv 解释1：myenv 是你的虚拟环境目录名（可自定义）。 解释2：\u0026ndash;system-site-packages 会让虚拟环境继承系统中已安装的包。 方法 2：对已存在的虚拟环境启用系统包 解释：如果虚拟环境已经创建，但没有继承系统包，可以通过修改虚拟环境的配置文件手动启用. (1). 找到虚拟环境的 pyvenv.cfg 文件（通常在虚拟环境的根目录）： cat myenv/pyvenv.cfg (2). 修改或添加以下行代码内容： include-system-site-packages = true (3). 重新激活虚拟环境即可生效。 2.5 python开发 在 Linux 中，要查看 Python 的 .py 文件内容，可以使用以下几种命令： 使用 cat 命令： cat /path/to/your_python_file.py（cat 命令用于显示文件内容，将会在终端输出整个 .py 文件的内容） 使用 less 命令： less /path/to/your_python_file.py（less 命令可以按页显示文件内容，适用于较大的文件，可以使用箭头键和 PageUp/PageDown 键进行浏览） 使用 more 命令： more /path/to/your_python_file.py（more 命令也可以按页显示文件内容，与 less 类似，但在显示文件内容时的交互方式略有不同） 使用 vim 或 nano 编辑器：(前提是需要先安装好有这个要用的编辑器,一般nano是自带会有的) vim /path/to/your_python_file.py或nano /path/to/your_python_file.py（vim 和 nano 都是文本编辑器，但您也可以使用它们来查看 .py 文件的内容。在 vim 或 nano 中，您可以按 Esc 键退出查看模式，然后输入 :q 命令退出编辑器） 2.6 vim编辑器的使用 初始模式： :w 保存不退出 :q 不保存退出，一般与w搭配:wq保存并退出vim，回到命令行界面 :! 强制性操作，一般与q搭配:!q 为强制退出不保存 / + 文本 查找字符串命令，查找多个匹配结果，可以n键向下查找，N向上查找。 set nu 显示行数。 set nonu 不显示行数 sp + 文件路径 再打开一个窗口，sp表示水平切分窗口，vs表示垂直切分窗口。 v 进入视图模式 i/a 进入编辑模式 视图模式： 上、下、左、右键或者 k（上）、j（下）、h（左）、l（右） 命令进行光标移动并选中文字 选中文本后，d剪切 y复制 p粘贴 x 删除光标所在的单个字符 dd 删除一整行（相当于剪切），p 粘贴 yy 复制单行 u 撤销 Esc按键 退出视图模式回到初始模式 编辑模式： Esc按键 退出视图模式回到初始模式 其他按键则正常输入文本即可 3. ROS2学习笔记 大部分是本人的学习笔记，学习视频主要是鱼香ROS机器人他的知识点和视频内容很详细，真的是在印证\u0026quot;授人以鱼不如授人以渔\u0026quot;。此外还会加上一些个人理解，希望能帮助加深理解，仅供学习参考！\n3.1 ros2 run (1). 命令ros2 run会从一个软件包中启动一个可执行文件： ros2 run \u0026lt;package_name\u0026gt; \u0026lt;executable_name\u0026gt; (2). 解释： eg：要运行turtlesim，请打开一个新的终端，并输入以下命令： ros2 run turtlesim turtlesim_node turtlesim窗口将会打开 这里，包名是 使用 turtlesim ，可执行文件名是 turtlesim_node 然而，我们还不知道节点名称。您可以使用 ros2 node list 命令查找节点名称。 3.2. ros2 node list (1). ros2 node list 命令将显示所有正在运行的节点的名称。当您想与节点进行交互或者系统运行多个节点时需要跟踪它们时，这特别有用。 (2). 解释： (A). 在另一个终端中打开新的终端，同时 turtlesim 仍在运行，请输入以下命令： ros2 node list (B). 终端将返回节点名称： /turtlesim (C). 再打开一个新的终端，并使用以下命令启动 teleop 节点： ros2 run turtlesim turtle_teleop_key 【在这里，我们再次引用了“turtlesim”软件包，但这次我们的目标是名为“turtle_teleop_key”的可执行文件】\n(D). 返回到之前运行ros2 node list的终端，再次运行该命令。你将会看到两个活动节点的名称：\n/turtlesim /teleop_turtle 3.3. 重映射 (1). 重映射：允许你重新分配默认节点属性，如节点名称、话题名称、服务名称等，以自定义的值。在上一个教程中，你在turtle_teleop_key上使用了重映射来改变cmd_vel话题和目标节点为turtle2。 (2). 解释： - (A). 现在，让我们重新分配 /turtlesim 节点的名称。在一个新的终端中运行以下命令： - ros2 run turtlesim turtlesim_node \u0026ndash;ros-args \u0026ndash;remap __node:=my_turtle - (B). 由于您再次调用ros2 run 启动了turtlesim，将会打开另一个turtlesim窗口。但是，现在如果您返回到之前运行ros2 node list的终端，并再次运行该命令，您将看到三个节点名称： - /my_turtle - /turtlesim - /teleop_turtle 3.4. ros2节点信息 (既然您知道了节点的名称，您可以使用以下命令访问有关它们的更多信息)\nros2 node info \u0026lt;node_name\u0026gt; (例). 要查看您最新的节点my_turtle，请运行以下命令： ros2 node info /my_turtle ros2 node info返回订阅者、发布者、服务和动作的列表，即与该节点进行交互的ROS图连接。输出应该如下所示： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 /my_turtle Subscribers: /parameter_events: rcl_interfaces/msg/ParameterEvent /turtle1/cmd_vel: geometry_msgs/msg/Twist Publishers: /parameter_events: rcl_interfaces/msg/ParameterEvent /rosout: rcl_interfaces/msg/Log /turtle1/color_sensor: turtlesim/msg/Color /turtle1/pose: turtlesim/msg/Pose Service Servers: /clear: std_srvs/srv/Empty /kill: turtlesim/srv/Kill /my_turtle/describe_parameters: rcl_interfaces/srv/DescribeParameters /my_turtle/get_parameter_types: rcl_interfaces/srv/GetParameterTypes /my_turtle/get_parameters: rcl_interfaces/srv/GetParameters /my_turtle/list_parameters: rcl_interfaces/srv/ListParameters /my_turtle/set_parameters: rcl_interfaces/srv/SetParameters /my_turtle/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically /reset: std_srvs/srv/Empty /spawn: turtlesim/srv/Spawn /turtle1/set_pen: turtlesim/srv/SetPen /turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute /turtle1/teleport_relative: turtlesim/srv/TeleportRelative Service Clients: (none) Action Servers: /turtle1/rotate_absolute: turtlesim/action/RotateAbsolute Action Clients: (none) 3.5. 编译运行C++文件 (1). 先在目录下编写CMakeFiles.txt：\n示例： 1 2 3 4 5 6 7 8 9 10 cmake_minimum_required(VERSION 3.8) project(ros2_cpp) add_executable(ros2_cpp_node ros2_cpp_node.cpp) find_package(rclcpp REQUIRED) # 直接查找到对应的头文件和库文件 message(STATUS ${rclcpp_INCLUDE_DIRS}) #头文件及rclcpp依赖的头文件 message(STATUS ${rclcpp_LIBRARIES}) #库文件及rclcpp依赖的库文件 target_include_directories(ros2_cpp_node PUBLIC ${rclcpp_INCLUDE_DIRS}) #头文件包好到ros2_cpp_node文件内 target_link_libraries(ros2_cpp_node ${rclcpp_LIBRARIES}) #库文件链接到ros2_cpp_node文件内 (2). 再在当前目录下运行终端命令：\ncmake . make 【之后会生成一个可以执行文件为绿色的，直接终端输入既可运行】 3.6. 创建功能包 (✔️). ros2 pkg create \u0026ndash;build-type ament_python \u0026ndash;license Apache-2.0 demo_python_pkg【中间的\u0026ndash;是可选项配置，有编译版本，许可证，存放目录等等】 (✔️). 启用节点函数 setup.py添加： python_NODE = demo_python_pkg.pyhon_node:main 【生成可执行文件的名称以及包名和路径，函数名称】 (✔️). 将需要导入的库加入到package.xml功能包清单文件的声明里面导入包，添加依赖信息： 1 \u0026lt;depend\u0026gt;rclpy\u0026lt;/depend\u0026gt; (✔️). 添加完之后需要开启构建功能包：colcon build 【终端直接执行命令，执行完之后是会根据你之前配置的调用函数拷贝复制一份一模一样的.py文件，然后运行调用的是复制过来的文件，不是原来的本身的文件，所以后续写了更新之后它的包调用的是你上一次拷贝的，不是你新写的】 (✔️). 修改环境变量：source install/setup.bash【此文件是创建时生成的】\n或者也可以手动添加这个环境变量： 1 export PYTHONPATH=/home/robot/chapt2/install/demo_python_pkg/lib/python3.12/site-packages:$PYTHONPATH # $PYTHONPATH表示原来的路径不变，缩写，然后加：前面加需要添加的路径 3.7. 其他 (A). echo 🔵查看当前ROS1/ROS2：echo $ROS_VERSION【中间有个下划线】 🔵查看当前ROS版本：echo $ROS_DISTRO (B). 总的打印环境变量信息 🟡printenv 打印特定的信息，进行信息过滤：printenv | grep 想要打印的环境变量 (C). 修改环境变量的文件位置 🟣export 环境变量名称=想要修改的文件位置（仅在当前终端临时修改成效，再另开还是原来的环境位置） (D). 在linux中，以.开头的文件或者文件夹，是隐藏文件 🔴(例). 启动自运行脚本：~/.bashrc (E). 安装python插件在vscode中的代码注释ctrl加左键，或者长放提示的注释形式 (F). 增加可执行文件的执行权限，白色为较低权限，绿色为较高权限可进行执行： 🟠chmod a+x 文件名 (G). 查看节点的具体信息 ⚫ros2 node info /节点名称 4. 心得总结 移步完这篇笔记内容才算是把我本地电脑上那个“原始人的CMD笔记”给完全移步完😥，也算是逐步纠正自己的拖延症和懒了😩。其实Linux的学习感觉还是有很多实践和操作需要动手边学边运用才能更好吸收，后面更多的还是带入实际项目中去边学边做！还有后面需要的细分在Linux系统下具体做例如音频，网络等等开发再栏，先学习运用在ROS机器人操作系统上的具体例如自主导航，手眼标定抓取等等，一步一步总会找到属于自己想要的🥱🥱🥱\n","date":"2025-09-13T00:00:00Z","image":"https://prominsegsj.github.io/p/linux_learn/2_hu_10a77e11c215a0af.png","permalink":"https://prominsegsj.github.io/p/linux_learn/","title":"【Linux】操作系统的学习"},{"content":"Github的Git使用学习笔记 小锅的Git使用笔记记录🫠(与“【Windos系统】CMD学习使用”笔记一同挪过来的🦊)\n1. 常用基础 Git初始化：git init（需要再对应文件目录下初始化） 查看Git仓库状态：git status 将文件放到中转存储区：git add ＋文件名(git add . (意思是将当前文件中的所有文件添加到暂存区)) 提交到仓库：git commit（只会提交暂存区的文件也就是标绿的文件，红色文件是还未被放到暂存区的文件不会被提交） 改文件名：mv＋要改的文件＋要改为的名字 批量将文件放到暂存区：add *.文件格式 查看提交仓库记录：git log 回退版本命令：git reset \u0026ndash;三种模式 查看当前分支情况：git branch 新建分支：git branch 分支名 切换到其他分支：git checkout 分支名 新建加切换一步到位：git checkout -b 分支名 合并到主分支上：git merge 需要合并的分支名 删除分支：git branch -d 分支名（-D则为强制删除） 给当前开发代码状态加上标签：git tag 标签名（例如：V1.0） 切换到想要切换的标签状态：git checkout 标签名 2. 提交并且上传到github仓库上大致流程 2.1 首次提交大致流程 ↘️ 1.在需要提交文件目录下打开git brash\n↘️ 2.git init（初始化文件夹为git管理）\n↘️ 3.git add 文件/.（将需要提交到仓库的文件放到暂存区）\n↘️ 4.git commit -m \u0026ldquo;(此次提交记录的备注)\u0026quot;\n↘️ 5.git branch（检查当前所处分支）\n↘️ 6.git remote add origin 仓库ssh地址（创建一个名为origin的远程仓库并且与github上的指定仓库连接）\n↘️ 7.git push -u origin main （最后将当前main分支的已commit的部分push到远程仓库origin上即上传到github上）\n2.2 疑难问题 问题1:后续第二次等的提交注意 重点在后续版本的提交时或者多人开发时应该先：git pull origin main （在提交之前习惯性需要先更新本地仓库跟远程仓库同步，记住是在commit之前同步，不然会报错）即使简单的遇到历史提交不匹配问题，也可以直接执行：git pull 进行合并更新 问题2:删除空的 origin（可选） (例). git remote remove origin 问题3:强制推送： (例). git push -f origin main 3. 心得总结 此篇也是在我之前的那篇TXT文件里面藏着的原始人笔记，我想给他隔开来单独作为Git学习的笔记记录。Github作为全球最大的开源平台还是很多地方可以学习，有海量的全球优秀的开源作品，不管是自己学习用还是做项目都应该学习如何使用和管理自己的项目。开源的思想我认为也是非常棒的觉悟思想(听说好像要整改被微软收购，后面风向会不会变也不知道，但是感觉大方向的开源核心应该是不会变的呢🧐)。作为向更多更优秀的人学习的一项必备技能，希望大家(重点Q自己)要好好学习，要努力提升自己！😎\n","date":"2025-09-11T00:00:00Z","image":"https://prominsegsj.github.io/p/git_learn/1_hu_5f2d8854557f7f45.png","permalink":"https://prominsegsj.github.io/p/git_learn/","title":"【GitHub】基础学习"},{"content":"Windos系统下的cmd 小锅的windos终端使用记录😇(扩展后续了解学习使用PowerShell)\n1. 开启普通终端CMD win＋R 键然后输入cmd指令开启终端窗口\n2. 常用的终端操作 删除： (1). 删除文件夹： rmdir＋文件夹名（注意和del区分） 或者 rd 文件名 /s（反馈选择是否删除非空文件） 或者 rd 文件名 /q （不会反馈任何信息，安静删除） (2). 删除文件：del＋文件 获取时间 (1). 打印当前日期：date (2). 打印当前具体时间：time 复制·剪切 (1). 复制文件夹：copy 要复制的文件 对应的文件夹（只能复制文件，不能复制文件夹xcopy） (2). 剪切文件夹：move 要剪切的文件夹 到哪个文件夹的位置 回声操作： echo 打印文件夹内容： dir 转换文件夹位置：文件夹名: (此处后面要的冒号要记得加) 跳转文件夹位置： cd 打开文件夹图形界面： start 创建文件夹： mkdir or md 文件名 访问从不同文件夹的东西：dir 起始文件夹\\要打印的文件夹 重命名：ren 原文件名 重命名后的文件名 清屏终端之前的操作：cls 3. 小开关 显示指令的功能以及如何使用对应指令：指令＋/？ 显示所有文件夹包括隐藏文件：dir＋/a 循环往复的小开关：指令＋/s＋文件或者其他操作 改变变量： (例) path＝“path”；文件路径 定向输出：需要输出的内容＋＞要输出的文件 (＞＞是删除内容的输出.如果定向输出到nul处则不会有任何显示，意思是倒入垃圾桶) 打开文本文件：type＋文件 定向输入： (例) more＋＜加文件（按页面内容吗一页一页显示） 接力符：| (例) tasklist | more 打开计算器：calc 了解所有进程：tasklist 结束某个进程：taskkill /f /pid 序号 打开浏览器：start msedge 4. 创建txt文本文件 (1).echo. \u0026gt;文件名.txt (2).copy nul 文件名.txt (3).type nul \u0026gt; 文件名.txt（或者建其他文件格式都是这样） 5. 进程管理命令 tasklist #显示计算机上运行的进程列表。 tasklist /V #显示详细任务信息。 taskkill #按照进程ID（PID）或映像名称终止任务。 taskkill /PID 1024 #停止PID=1024 的进程。 taskkill /IM capiws.exe #停止名称为capiws的进程。 taskkill /F /PID 1024 #强制终止进程。 6. 用户管理命令 net user #windows账户管理工具。 net user guest #列出guest账户的信息。 net user hacker 123456 /add #添加账户。 net user hacker 888888 #修改密码。 net user hacker /active:yes|no #启用|禁用账户。 net user hacker /delete #删除账户。 7. 网络管理命令 ipconfig #显示网络配置信息。 ipconfig /all #显示完整配置信息。 ipconfig /displaydns #显示DNS缓存。 ipconfig /flushdns #清理DNS缓存。 番外Tip篇 ollama跑8b模型：(好像是DS热门那会儿我试了一下本地部署DS，没办法电脑性能不行，带不动多好的模型，所以只能玩一玩这个8b的超笨模型😂，相关教程可以b站搜索：ollama本地部署DS，我就不补充配置了。权当做笔记记录使用了😜) (例). ollama run deepseek-r1:8b 8. 心得总结 windos的cmd终端的使用开发还是仅限于上述的基础部分的运用，还有很多功能和使用没有\u0026quot;用到\u0026quot;，等后续有新的使用技巧我再更新做笔记上去(ps:实则是因为自己太懒🙂‍↕️🙂‍↕️，只能算一个学习笔记记录吧，把我的那篇原始人的TXT笔记挪过来啦😅)！!\n","date":"2025-09-11T00:00:00Z","image":"https://prominsegsj.github.io/p/windos_cmd_learn/3_hu_c53d1c5fe612bf14.jpg","permalink":"https://prominsegsj.github.io/p/windos_cmd_learn/","title":"【Windos系统】CMD学习使用"},{"content":"YOLO视觉学习 ↪︎初步接触深度学习视觉检测，主要为学习YOLOV8为初步入门使用教程学习🫣\n1. 环境配置 (发现基本上的学习历程大部分都卡在了环境搭建😭，所以我尽量把环境搭建的细节和流程写详细一点！)\n1.1 安装miniconda 安装miniconda版本为py38windos版本:\n🔹https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/\n【主要用于虚拟环境的配置，在python开发中都可以用的到】\n1.2 虚拟环境搭建 (1) 在conda终端中新建一个名为yolov8的虚拟环境，指定python版本为3.8：conda create -n yolov8 python=3.8【指定python版本位3.8版本】\n(2) 激活/切换到yolov8虚拟环境：conda activate yolov8（虚拟环境名称）\n1.3 镜像源配置(主要是方便本地下载) pypi配置国内清华镜像：（替换为长期，就是将你以后的pip安装下载的通道改为从国内的镜像来下载，大部分的库或者安装都是在国外网站，下载比较慢，所以替换镜像为清华源，还有其他的类似的阿里等等）\n🔹https://mirrors.tuna.tsinghua.edu.cn/help/pypi/\n1.4 pytorch环境安装 pytorch环境安装：https://pytorch.org/（注意选择合适版本）\n1.5安装ultralytics（yolov8）： (1) 安装zip总文件：\n🔹https://github.com/ultralytics/ultralytics\n(2) 终端进入文件夹\\ultralytics-main输入命令：pip install -e . 【后面的点要带！】\n【详细介绍还是不够的话可以参考此b站视频🤗🤗】 (3) ultralytics官方文档:\n🔹https://docs.ultralytics.com/zh/ 2. 模型预测及训练使用 2.1 标注图片环境下载 (1) 下载labelimg：pip install labelimg (2) 启动labelimg：labelimg 2.2 训练模型 (1) 标注完文件将文件创建好： Train-项目名 images train:（存放所有照片） val:（存放验证集照片） labels train:（存放所有标注后的.txt） val:（存放验证标志.txt） classes.txt（标注种类文件） (2) 创建好放到Train-项目名文件将文件放到datasets文件夹内 (3) 写好相应的yaml文件之后开始到tarin.py文件填好相应的文件路径和名称，最后开始训练 配置.yaml文件示例 1 2 3 4 5 6 7 8 9 10 path: Train-项目名 train: images/train val: images/val test: #可选项 names: 0: 标注时第一个标注对象名称 1: 标注时第二个标注对象名称 nc: 对象种类个数 train.py文件示例 1 2 3 4 5 6 7 from ultralytics import YOLO model = YOLO(\u0026#39;yolov8n.pt\u0026#39;) #参考预测模型文件，如果是自己的可以放自己last.pt文件继续训练 model.train(data=\u0026#39;配置.yaml\u0026#39;,workers=0,epochs=50,batch=16)#后面参数可自行根据训练硬件配置选择 print(\u0026#34;训练完成！\u0026#34;) (4) 训练完最终模型文件存放在runs/detect/trainxx/weights/xxx.pt 2.3 跑训练模型效果 简单使用示例代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from ultralytics import YOLO yolo = YOLO(\u0026#34;./best.pt\u0026#34;) # 小目标检测专用配置 result =yolo( source=\u0026#34;./detect_Text/Player.mp4\u0026#34;, show=True, conf=0.05, # 低置信度 imgsz=1280, # 大尺寸输入 iou=0.4, # 较低的IoU阈值 max_det=100, # 增加最大检测数量 agnostic_nms=False, # 类相关的NMS augment=True, # 测试时增强 ) # for i in result: # print(i.boxes.xywh.cpu().numpy()) 3. 最终训练效果展示 下面是我训练YOLOv8模型后的检测效果照片：(用的是我朋友之前在人民公园跟大爷一起踢毽子的视频，此处肖像权省略略略略😝😝😝，视频太大传不上去，又不想上传到地方托管，所以只取了其中一张照片)\n视频：YOLOv8模型在自定义数据集上的检测效果,数据集我训练的比较少,最终的视频效果一般,后面需要的话还是增大数据训练集\n4. 学习心得总结 🔅初步整个学习历程下来还是在配置训练环境，主要是学习到windos系统下的虚拟环境的配置，还有yolov8主要训练流程还有打标工具labelimg下载等等。详细的系统深度学习还有其他的标注工具可以参考小土堆up。后面还有更深度的具体如何实现深度学习的方法，卷积等等算法实现可以为后续深入地学习了解。还有后面如何将YOLO视觉具体应用到类似ROS上，如何视觉和底盘或者机械臂等协同工作的流程还要继续学习研究！本篇只作为初步入门学习使用YOLO😊.\n","date":"2025-09-01T00:00:00Z","image":"https://prominsegsj.github.io/p/yolo/1_hu_9bad58c53e2ff1d6.png","permalink":"https://prominsegsj.github.io/p/yolo/","title":"【机器视觉】yolo视觉检测"},{"content":"搭建·历程 时间线： 2025年：\n🔜 08/25 (开始搭建，初步发布和部署Github)\n🔜 08/26 (开始优化框架界面，头像、网站图标、文字字体等)\n🔜 08/27 (逐步增加背景粒子效果和底部动画效果，文章Tile居中等等)\n🔜 08/28 (更新优化Html界面，搜索及链接栏的布局排版，网站界面元素动画等)\n1. 问题 1.初步发布和部署Github\n2.主要的网站显示问题和优化界面\n3.如何新建和发布编写自己的文章\n2. 解决过程 2.1 核心搭建学习 主要学习b站up主（此处贴的他个人网站的那篇博客）：参考B站UP主的个人博客网站\n2.2 网站Logo显示问题 网站的favicon没有显示问题参考：favicon显示参考网址\n2.3 动态背景效果 在添加动态背景时粒子效果一直加载不成功，用b站up主的源码复制发现不行，后面换路径就可以了。\n2.4 Markdown博客编写 添加图片： 添加视频：(添加视频的大小容易超过100MB，上传Github容易失败，尽量将需要上创的视频托管到类似B站等视频平台) 1 2 3 4 \u0026lt;video width=\u0026#34;100%\u0026#34; controls poster=\u0026#34;封面照片.jpg\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;视频名称.mp4\u0026#34; type=\u0026#34;video/mp4\u0026#34;\u0026gt; 您的浏览器不支持Video标签，请尝试使用现代浏览器查看。 \u0026lt;/video\u0026gt; 文章写法： 文字内容示例： 加粗 斜体 删除线 代码写法示例： 在Markdown里用三个反引号开启/关闭代码块。指定语言后,Hugo 会自动高亮。 例1：python 1 2 def hello(): print(\u0026#34;Hello Hugo!\u0026#34;) 例2：c++ 1 2 3 4 5 6 #include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; \u0026#34;Hello, Hugo!\u0026#34; \u0026lt;\u0026lt; endl; return 0; } 换行示例： (1).两个空格＋回车 1 2 这是第一行（结尾有两个空格） 这是第二行 (2).空一行 1 2 3 这是第一段 这是第二段（中间有空行） (3).HTML换行标签 1 2 3 这是第一行\u0026lt;br\u0026gt; 这是第二行\u0026lt;br\u0026gt; 这是第三行 GitHub风格的块引用Alerts： 参考引用Alerts学习文章\n2.3 link栏修改 2.3.1 删除上方多余文章 将技术链接上面的文章栏去掉：在link.md文章增加，然后再新增的links.html文件中添好相关代码\n2.3.2 修改显示列表 技术链接改行数：my_web\\assets\\scss\\custom.scss\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @media (min-width: 1024px) { .article-list--compact { display: grid; /* 目前是两列，如需三列，则后面再加一个1fr，以此类推 */ grid-template-columns: 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; margin-right: 8px; border-radius: 16px; } } } 2.4 博客Tile居中 更改主页的文章标题及内容居中文件路径:assets\\scss\\custom.scss\n2.5 优化网站显示 2.5.1 网站运行时间 增加网站运行时间：layouts\\partials\\footer.html\n2.5.2 网页元素动画 给网页元素添加动画：assets\\scss\\custom.scss\n2.5.3 目录显示优化 将目录的自动排序取消：hugo.yaml文件内修改ordered参数\n2.6 新增项目栏 新增一个项目栏：先在content\\page项目栏里新增一个栏目名称，然后添加md文件。\n编写好md后为它在layouts\\page\\增加好对应名称的html布局文件就可以了。\n不需要更改其他关联，hugo会自动识别并且连接使用，主要确保layout属性挂到html文件就可以\n2.7 修改文字显示 修改主页栏名称：content_index.zh-cn.md\n2.8 新建博客文章 新创建一篇博客文章：终端命令执行：hugo new post\\新文章名称\\index.md生成后编写即可\n总结心得 心得我写在了8/28，这几天都在做这个网站，初步能看了才开始编写这篇内容，本人专业是软件但是学校课程学的非常少，基本都是期末一周极限“预习”，低分飘过及格线。(在这里我要非常非常感谢一下我的英语老师，大英一到四，捞了我整整四个学期，真的不夸张，3个学期60分！)机缘巧合我走了嵌入式，加了学校的机器人工作室，也算是2年入门(后面我想单独会写一篇博客来纪念一下我逝去的这两年)，但是本人其中在工作室或者说这个比赛的经历非常坎坷，后面会在那篇文章详细聊聊。说实话这个网站搭的我非常艰辛，基本上不是在修BUG，找资料，就是在问AI怎么做，因为我对前端可以说是一点知识没有，虽然好像上个学期刚学过JAVA，但是前面我给自己叠了甲！但是还是坚持搭了下去，因为或许我可以在这里写一些我想说的话，想记录一下我的生活和内容。希这个网站我会一直坚持和维护的。还想起来我到时候也要记一篇我喜欢听的音乐成长历程博客，在这里先给自己标记一下！😇😇以后我估计我会常常更新我的日常，还有想起来我学了这么多东西总要有个记录备份呐，所以这个网站就必然的营运而生咯！\u0026ldquo;悦己，越己！\u0026rdquo;\n","date":"2025-08-27T00:00:00Z","image":"https://prominsegsj.github.io/p/my-first-blog/5_hu_ba930173166397ba.jpg","permalink":"https://prominsegsj.github.io/p/my-first-blog/","title":"第一篇博客"},{"content":"","date":"2024-01-01T00:00:00Z","permalink":"https://prominsegsj.github.io/p/match_life/","title":"【致】大一到大二的参赛历练💤"},{"content":"","date":"2024-01-01T00:00:00Z","permalink":"https://prominsegsj.github.io/p/my_song_life/","title":"【致】我的音乐历史🫡"}]